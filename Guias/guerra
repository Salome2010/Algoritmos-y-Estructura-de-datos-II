TAD Guerra{
    obs misMercenarios: dict<Mercenario,struct<c:Dinero,p:Poder>>
    obs batallones: conj<struct<m:Mercenarios,suma:Poder>> // Mercenarios es de tipo conj<Mercenario>
    obs dinero: Dinero
    obs territorios: conj<ts:Territorio>

    proc crerGuerra(in d:Dinero, in t:Territorio): Guerra{
        requiere {True}
        asegura {res.dinero = d & res.territorios = {t} & res.misMercenarios = {} & res.batallones = {}}
    }

    proc contratarMercenario(in m:Mercenario,in costo:Dinero, in poder:Poder, inout g:Guerra):{
        requiere {g = g0 & poder > 0 & g.dinero >= costo & m ∉ g.misMercenarios}
        asegura {|g.misMercenarios| = |g0.misMercenarios|+1}
        asegura {g.misMercenarios = setKey(g0.misMercenarios,m,<costo,poder>)}
        asegura {g.dinero = g0.dinero - costo}
        asegura {g.batallones = g0.batallones}
        asegura {g.territorios = g0.territorios}
    }

    proc crearBatallon(inout g:Guerra, in ms:struct<m:Mercenarios,suma:Poder>):{
        requiere {g = g0 & (∀i ∈ ms.m)(i ∈ g.misMercenarios) & ms.suma = sumaPoder(g.misMercenarios,ms.m)}
        asegura {g.batallones = g0.batallones ∪ {ms}}
        asegura {(∀i ∈ ms.m)(i ∈ g0.misMercenarios =>l i ∉ g.misMercenarios)}
        asegura {(∀j:Mercenario)((j ∈ g0.misMercenarios & j ∉ ms.m) =>l j ∈ g.misMercenarios)}
        asegura {g.dinero = g0.dinero}
        asegura {g.territorios = g0.territorios}

    }

    proc atacarTerritorio(in ms:struct<m:Mercenarios,suma:Poder>, in fe:Poder, in t:Territorio,inout g:Guerra):{
        requiere {g = g0 & ms ∈ g.batallones & g.dinero >= 500}
        asegura {fe < ms.suma => (g.dinero = g0.dinero + 1000 & g.territorios = g0.territorios ∪ {t})}
        asegura {fe > ms.suma => (g.dinero = g0.dinero - 500 & g.territorios = g0.territorios)}
        asegura {g.misMercenarios = g0.misMercenarios}
        asegura {g.batallones = g0.batallones}
    }
    proc dineroDisponible(in g:Guerra): Z{
        requiere {True}
        asegura {res = g.dineroI}
    }
    proc cantidadTerritorios(in g:Guerra): Z{
        requiere {True}
        asegura {res = |g.territorios|}
    }

    aux sumaPoder(m:Mercenarios, ms:dict<Mercenario,struct<c:Dinero,p:Poder>>) :Poder =
          Σ i ∈ m: ifThenElse(i ∈ ms, ms[i].p,0)
}

TAD dobleCola<T>{
    obs cola1: seq<T>
    obs cola2:seq<T>
    obs aula:seq<T>

    proc crearDobleCola():dobleCola<T>{
        requiere {True}
        asegura {res.cola1 = <> & res.cola2 = <> & res.aula = <>}
    }

    proc lleganALaCola1(inout dc:dobleCola<T>, in c1:T):{
        requiere {dc = dc0}
        asegura {dc.cola1 = dc0.cola1 ++ <c1>}
        asegura {dc.cola2 = dc0.cola2}
        asegura {dc.aula = dc0.aula}

    }
    proc lleganALaCola2(inout dc:dobleCola<T>, in c2:T):{
        requiere {dc = dc0}
        asegura {dc.cola1 = dc0.cola2 ++ <c2>}
        asegura {dc.cola1 = dc0.cola1}
         asegura {dc.aula = dc0.aula}
    }
    proc ingresanAlAula(inout dc:dobleCola<T>):{
        requiere {dc = dc0 & dc.cola1 != <> & dc.cola2 != <>}
        asegura {|dc.aula| = |dc0.cola1| + |dc0.cola2|}
        asegura {(∀i,j:Z)(0 ≤ i < |dc0.cola1| ∧ 0 ≤ j < |dc0.cola2| ∧ dc0.cola1[i] ∉ subseq(dc0.cola1, 0, i) ∧ 
            dc0.cola2[j] ∉ subseq(dc0.cola2, 0, j)) =>l <dc0.cola1[i], dc0.cola2[j]> ∈ subseq(dc.aula, |dc0.aula|, |dc.aula|)}
    }
}