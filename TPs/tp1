TAD $BerretaCoin {
    obs transacción: tupla(id: Z, comprador: Z, vendedor: Z, monto: Z)
    obs bloque: tupla(Z, seq<transaccion>)
    obs cadenaDeBloques: seq<tupla(Z, bloque)>
    obs transacciones: Bloque → seq<Transacción>

    proc agregarBloque(in bloq: tupla(Z, seq(transaccion)),inout b: BerretaCoin){
        requiere {b = b₀}
        requiere { |bloq| ≤ 50 } // para q las transacciones en bloq no sean mas de 50
        requiere {(∀ i,j: Z)(0 ≤ i < |bloq| - 1 ⇒ i<j ∧ bloq[i][0] < bloq[j][0])} 
        // ej: transaccion[i][0] < transaccion[i+1][0]
         
        requiere {bloqueLleno(b.cadenaDeBloques)}

        requiere {(bloq[0][1] = 0 ⇒ bloq[0][2] ≠ 0 ∧ bloq[0][3] ≤ 3000)}
        // requiere { #(t ∈ bloq : t[1] = 0 ∧ t[2] ≠ 0 ∧ t[3] ≤ 3000) = 1 } en el caso de q no hiciera falta q la transaccion de creacion este en la posicion 0
        // transaccion[0] (ej:  <0,0,id vendedor, monto<=3000> )
 
        requiere {∀ t ∈ bloq : t[3] > 0}
        requiere {(∀ u:Z)(u ∈ usuariosDelBloque(bloq) => totalRecibido(u, bloq) ≥ totalGastado(u, bloq))}
        // ej: bloque0 = [ (0,0,1,2000), (1,1,2,1000), (2,1,3,2500) ] no se puede pq el saldo del usuario 1 seria -1500

        asegura {|b.cadenaDeBloques| = |b₀.cadenaDeBloques| + 1 ∧ b.cadenaDeBloques[|b₀.cadenaDeBloques|] = bloq ∧
        (∀ i: Z)(0 ≤ i < |b₀.cadenaDeBloques| ⇒ b.cadenaDeBloques[i] = b₀.cadenaDeBloques[i])}

    }
    aux usuariosDelBloque(ts: seq<Transacción>): conj<Z> = // uso conj pq no quiero repetidos
     u ∈ res ↔ (∃ i: Z)(0 ≤ i < |ts| ∧ (ts[i][1] = u ∨ (ts[i][2] = u ∧ u ≠ 0)))

    aux totalRecibido(u: Z, ts: seq<Transacción>): Z = Σ i∈[0,|ts| - 1]: IfthenElse(ts[i][2] = u, ts[i][3], 0) 
    
    aux totalGastado(u: Z, ts: seq<Transacción>): Z = Σ i∈[0,|ts| - 1]: IfthenElse(ts[i][1] = u, ts[i][3], 0) 
    }

    proc maximosTenedores(in b: BerretaCoin) : seq<Usuario> 
        requiere {b.usuarios ≠ {}}
        asegura {(∃u ∈ b.usuarios)((∀v ∈ b.usuarios)(u != v ∧ saldo(u, b) > saldo(v, b)) ⇒ u ∈ res) ∨ 
        (∀v ∈ b.usuarios)(u != v ∧ saldo(u, b) >= saldo(v, b)) ⇒ u,v ∈ res)}
        asegura {(∀u ∈ res)((∀ v ∈ b.usuarios)( saldo(u, b) ≥ saldo(v, b)))}
        asegura {} 

     proc maximosTenedores(in b: BerretaCoin) returns (res: seq<Usuario>)
    requires b.usuarios ≠ {}
    ensures (∀u ∈ b.usuarios ::
                (∀v ∈ b.usuarios :: saldo(u, b) ≥ saldo(v, b)) ⇒ u ∈ res)
    ensures (∀u ∈ res :: 
                (∀v ∈ b.usuarios :: saldo(u, b) ≥ saldo(v, b)))
    ensures (∀i, j :: 0 ≤ i < |res| ∧ 0 ≤ j < |res| ∧ i ≠ j ⇒ res[i] ≠ res[j])     


pred EsDeCreacion(in bloq: seq<transacciones>, in b: BerretaCoin) {
  (|bloq| > 0) ∧ (bloq[0].idTransaccion = 0) ∧ (bloq[0].idComprador = 0)
        ∧ (bloq[0].idVendedor != 0)∧ (∀bl ∈ b.blockchain)(∀t ∈ bl.transaccionesbloque)
                                                        ((t != bloq[0]) => t.idTransaccion != bloq[0].idTransaccion)
} //
 



pred EsMaximosTenedores(in b: BerretaCoin, in res: seq<Z>) {
  //todos los elementos de res son claves válidas en b.usuarios
  //para cada i en res, su saldo es mayor o igual que el saldo de cualquier usuario en usuarios
  (∀i:Z)(i ∈ res =>l (i ∈ claves(b.usuarios) ∧ (∀j:Z)(j ∈ claves(b.usuarios) =>l b.usuarios[i] >= b.usuarios[j])))
  //todos los usuarios en res tienen el mismo saldo (ie, los máximos tienen saldo igual)
  ∧ (∀i,j:Z)((i ∈ res ∧ j ∈ res) =>l b.usuarios[i] = b.usuarios[j])
}


proc montoMedio(in b: BerretaCoin) : Z
  requiere {b.blockchain != []}
  asegura {cantTransacciones(b) != 0 => res = sumaTransacciones(b, 1, 0) / cantTransacciones(b)
    ∧ (cantTransacciones(b) = 0 => res = 0)}

proc cotizacionAPesos(in b: BerretaCoin, in cotizaciones: seq<Z>) : seq<Z>
  requiere {|cotizaciones| = |b.blockchain|}
  asegura {|res| = |b.blockchain|}
  asegura {(∀h : Z)(0 <= h < |b.blockchain| =>l res[h] = cotizaciones[h] * sumaTransaccionesBloque(b, h))}


proc agregarBloque(in bloq: seq<transacciones>, inout b: BerretaCoin)
  requiere {b = b0}
  requiere {|bloq| ≤ 50}
  requiere {(∀t: transacciones)(t ∈ bloq =>l t.monto > 0)}  //solo t ∈ bloq
  requiere {(∀i, j: Z)((0<= i < |bloq| ∧ i < j < |bloq|) =>l bloq[i].idTransaccion < bloq[j].idTransaccion)}  //creciente
  requiere {(∀i: Z)(0 <= i < |bloq| =>l bloq[i].idComprador != bloq[i].idVendedor)}

  requiere {(|b.blockchain| <= 3000 => EsDeCreacion(bloq, b)) ∧ (|b.blockchain| > 3000 => bloq[0].idTransaccion != 0)}  
  //los primeros 3000 deben ser de creación
  requiere {NingunoGastaMasDeLoQueTiene(b, bloq)} 
  asegura {|b.blockchain| = |b0.blockchain| + 1}  //se agregó un bloque
  asegura {b.blockchain[|b.blockchain| - 1].idBloque > b0.blockchain[|b0.blockchain| - 1].idBloque}
  asegura {b.blockchain = b0.blockchain ++ ⟨⟨b0.blockchain[|b0.blockchain| - 1].idBloque + 1, bloq⟩⟩}//ahora idUltimoBloque ya no esta

  asegura {if |b.blockchain| > 3000 then b.unidades = b0.unidades else b.unidades = b0.unidades + 1}//creación emite 1 unidad
  asegura {b.blockchain[|b.blockchain| - 1].transaccionesbloque[0].idTransaccion > 
                                                              b0.blockchain[|b.blockchain| - 1].transaccionesbloque[49].idTransaccion}






